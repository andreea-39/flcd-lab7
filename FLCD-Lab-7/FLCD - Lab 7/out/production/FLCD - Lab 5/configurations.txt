       Configuration 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 1, workingStack = [], inputStack = [program]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 1, workingStack = [program-1], inputStack = [main, (, ), {, statement, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 2, workingStack = [program-1, main], inputStack = [(, ), {, statement, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 3, workingStack = [program-1, main, (], inputStack = [), {, statement, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 4, workingStack = [program-1, main, (, )], inputStack = [{, statement, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {], inputStack = [statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-1], inputStack = [assignment_statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-1], inputStack = [assignment_statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-2], inputStack = [assignment_statement, statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-2], inputStack = [assignment_statement, statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-3], inputStack = [for_statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-3], inputStack = [for_statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4], inputStack = [declaration_statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-4], inputStack = [declaration_statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-5], inputStack = [read_statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-5], inputStack = [read_statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-6], inputStack = [while_statement, statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-6], inputStack = [while_statement, statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-7], inputStack = [read_statement, statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-7], inputStack = [read_statement, statement, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-8], inputStack = [if_statement, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 6, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if], inputStack = [(, condition, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (], inputStack = [condition, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1], inputStack = [expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1], inputStack = [string_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-1], inputStack = [identifier, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-1], inputStack = [identifier, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2], inputStack = [constant, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant], inputStack = [relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-1], inputStack = [==, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-1], inputStack = [==, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-2], inputStack = [<=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-2], inputStack = [<=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-3], inputStack = [<, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-3], inputStack = [<, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-4], inputStack = [!=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-4], inputStack = [!=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-5], inputStack = [>, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-5], inputStack = [>, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6], inputStack = [>=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=], inputStack = [expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1], inputStack = [string_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1], inputStack = [string_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2], inputStack = [int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-2], inputStack = [identifier, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-2], inputStack = [identifier, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-3], inputStack = [identifier, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-3], inputStack = [identifier, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-4], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-5], inputStack = [identifier, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-5], inputStack = [identifier, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-6], inputStack = [constant, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-6, constant], inputStack = [%, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-6, constant], inputStack = [%, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-6], inputStack = [constant, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-7], inputStack = [constant, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-7, constant], inputStack = [/, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-7, constant], inputStack = [/, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-7], inputStack = [constant, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-8], inputStack = [constant, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-8, constant], inputStack = [+, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-8, constant], inputStack = [+, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-8], inputStack = [constant, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-9], inputStack = [identifier, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-9], inputStack = [identifier, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-10], inputStack = [constant, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-10, constant], inputStack = [-, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-10, constant], inputStack = [-, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-10], inputStack = [constant, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-11], inputStack = [constant, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-11, constant], inputStack = [*, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-11, constant], inputStack = [*, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-11], inputStack = [constant, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-12], inputStack = [identifier, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2, int_expression-12], inputStack = [identifier, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-2], inputStack = [int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3], inputStack = [char_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3, char_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-3], inputStack = [char_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=], inputStack = [expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant, relation-6], inputStack = [>=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2, constant], inputStack = [relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1, string_expression-2], inputStack = [constant, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-1], inputStack = [string_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2], inputStack = [int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-1], inputStack = [identifier, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-1], inputStack = [identifier, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-2], inputStack = [identifier, /, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-2], inputStack = [identifier, /, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-3], inputStack = [identifier, *, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-3], inputStack = [identifier, *, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4], inputStack = [constant, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant], inputStack = [relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-1], inputStack = [==, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-1], inputStack = [==, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-2], inputStack = [<=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-2], inputStack = [<=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-3], inputStack = [<, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-3], inputStack = [<, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-4], inputStack = [!=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-4], inputStack = [!=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-5], inputStack = [>, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-5], inputStack = [>, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6], inputStack = [>=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=], inputStack = [expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1], inputStack = [string_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1, string_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-1], inputStack = [string_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2], inputStack = [int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-2], inputStack = [identifier, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-2], inputStack = [identifier, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-3], inputStack = [identifier, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-3], inputStack = [identifier, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-4], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-5], inputStack = [identifier, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-5], inputStack = [identifier, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-6], inputStack = [constant, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-6, constant], inputStack = [%, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-6, constant], inputStack = [%, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-6], inputStack = [constant, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-7], inputStack = [constant, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-7, constant], inputStack = [/, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-7, constant], inputStack = [/, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-7], inputStack = [constant, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-8], inputStack = [constant, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-8, constant], inputStack = [+, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-8, constant], inputStack = [+, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-8], inputStack = [constant, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-9], inputStack = [identifier, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-9], inputStack = [identifier, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-10], inputStack = [constant, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-10, constant], inputStack = [-, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-10, constant], inputStack = [-, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-10], inputStack = [constant, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-11], inputStack = [constant, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-11, constant], inputStack = [*, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-11, constant], inputStack = [*, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-11], inputStack = [constant, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-12], inputStack = [identifier, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2, int_expression-12], inputStack = [identifier, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-2], inputStack = [int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3], inputStack = [char_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3, char_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=, expression-3], inputStack = [char_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6, >=], inputStack = [expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant, relation-6], inputStack = [>=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4, constant], inputStack = [relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-4], inputStack = [constant, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-5], inputStack = [identifier, %, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-5], inputStack = [identifier, %, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-6], inputStack = [constant, %, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-6, constant], inputStack = [%, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-6, constant], inputStack = [%, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-6], inputStack = [constant, %, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-7], inputStack = [constant, /, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-7, constant], inputStack = [/, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-7, constant], inputStack = [/, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-7], inputStack = [constant, /, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-8], inputStack = [constant, +, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-8, constant], inputStack = [+, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-8, constant], inputStack = [+, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-8], inputStack = [constant, +, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-9], inputStack = [identifier, +, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-9], inputStack = [identifier, +, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-10], inputStack = [constant, -, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-10, constant], inputStack = [-, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-10, constant], inputStack = [-, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-10], inputStack = [constant, -, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-11], inputStack = [constant, *, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-11, constant], inputStack = [*, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-11, constant], inputStack = [*, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-11], inputStack = [constant, *, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-12], inputStack = [identifier, -, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2, int_expression-12], inputStack = [identifier, -, int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-2], inputStack = [int_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3], inputStack = [char_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-1], inputStack = [identifier, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-1], inputStack = [identifier, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2], inputStack = [constant, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant], inputStack = [relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-1], inputStack = [==, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-1], inputStack = [==, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-2], inputStack = [<=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-2], inputStack = [<=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-3], inputStack = [<, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-3], inputStack = [<, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-4], inputStack = [!=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-4], inputStack = [!=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-5], inputStack = [>, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-5], inputStack = [>, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6], inputStack = [>=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=], inputStack = [expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1], inputStack = [string_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1, string_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-1], inputStack = [string_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2], inputStack = [int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-2], inputStack = [identifier, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-2], inputStack = [identifier, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-3], inputStack = [identifier, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-3], inputStack = [identifier, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-4], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-5], inputStack = [identifier, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-5], inputStack = [identifier, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-6], inputStack = [constant, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-6, constant], inputStack = [%, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-6, constant], inputStack = [%, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-6], inputStack = [constant, %, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-7], inputStack = [constant, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-7, constant], inputStack = [/, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-7, constant], inputStack = [/, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-7], inputStack = [constant, /, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-8], inputStack = [constant, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-8, constant], inputStack = [+, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-8, constant], inputStack = [+, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-8], inputStack = [constant, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-9], inputStack = [identifier, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-9], inputStack = [identifier, +, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-10], inputStack = [constant, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-10, constant], inputStack = [-, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-10, constant], inputStack = [-, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-10], inputStack = [constant, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-11], inputStack = [constant, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-11, constant], inputStack = [*, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-11, constant], inputStack = [*, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-11], inputStack = [constant, *, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-12], inputStack = [identifier, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2, int_expression-12], inputStack = [identifier, -, int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-2], inputStack = [int_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3], inputStack = [char_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-1], inputStack = [identifier, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, ), {], inputStack = [statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant, )], inputStack = [{, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2, constant], inputStack = [), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3, char_expression-2], inputStack = [constant, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=, expression-3], inputStack = [char_expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6, >=], inputStack = [expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant, relation-6], inputStack = [>=, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2, constant], inputStack = [relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3, char_expression-2], inputStack = [constant, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1, expression-3], inputStack = [char_expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (, condition-1], inputStack = [expression, relation, expression, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if, (], inputStack = [condition, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 6, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1, if], inputStack = [(, condition, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 5, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 6, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if], inputStack = [(, condition, ), {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (], inputStack = [condition, ), {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1], inputStack = [expression, relation, expression, ), {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1], inputStack = [string_expression, relation, expression, ), {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-1], inputStack = [identifier, relation, expression, ), {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-1], inputStack = [identifier, relation, expression, ), {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 7, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2], inputStack = [constant, relation, expression, ), {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant], inputStack = [relation, expression, ), {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-1], inputStack = [==, expression, ), {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-1], inputStack = [==, expression, ), {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-2], inputStack = [<=, expression, ), {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-2], inputStack = [<=, expression, ), {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-3], inputStack = [<, expression, ), {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-3], inputStack = [<, expression, ), {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-4], inputStack = [!=, expression, ), {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-4], inputStack = [!=, expression, ), {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-5], inputStack = [>, expression, ), {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-5], inputStack = [>, expression, ), {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 8, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6], inputStack = [>=, expression, ), {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=], inputStack = [expression, ), {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1], inputStack = [string_expression, ), {, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-1], inputStack = [identifier, ), {, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-1], inputStack = [identifier, ), {, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 9, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2], inputStack = [constant, ), {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 10, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant], inputStack = [), {, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 11, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, )], inputStack = [{, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {], inputStack = [statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-1], inputStack = [assignment_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-2], inputStack = [assignment_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-3], inputStack = [for_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-4], inputStack = [declaration_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-5], inputStack = [read_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-6], inputStack = [while_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-7], inputStack = [read_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-8], inputStack = [if_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-9], inputStack = [for_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-10], inputStack = [while_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-11], inputStack = [declaration_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-12], inputStack = [if_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-1], inputStack = [identifier, =, expression, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1, assignment_statement-2], inputStack = [identifier, =, identifier, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-1], inputStack = [assignment_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-1], inputStack = [identifier, =, expression, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2, assignment_statement-2], inputStack = [identifier, =, identifier, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-2], inputStack = [assignment_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-3], inputStack = [for_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-1], inputStack = [variable_declaration_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4, declaration_statement-2], inputStack = [array_declaration_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-4], inputStack = [declaration_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5, read_statement-1], inputStack = [read, read_helper, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-5], inputStack = [read_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-6], inputStack = [while_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7, read_statement-1], inputStack = [read, read_helper, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-7], inputStack = [read_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-8], inputStack = [if_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-1], inputStack = [for, identifier, in, identifier, {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9, for_statement-2], inputStack = [for, identifier, in, range, (, range_list, ), {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-9], inputStack = [for_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10, while_statement-1], inputStack = [while, (, condition, ), {, statement, }, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-10], inputStack = [while_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-1], inputStack = [identifier_list, :, type, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-1], inputStack = [identifier, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1, variable_declaration_statement-2], inputStack = [identifier_list, :, type, =, expression, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-1], inputStack = [variable_declaration_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-1], inputStack = [identifier, :, type, [, ], ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1, identifier_list-2], inputStack = [identifier, ,, identifier_list, :, type, [, ], ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2, array_declaration_statement-1], inputStack = [identifier_list, :, type, [, ], ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11, declaration_statement-2], inputStack = [array_declaration_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-11], inputStack = [declaration_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-1], inputStack = [if, (, condition, ), {, statement, }, else, {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12, if_statement-2], inputStack = [if, (, condition, ), {, statement, }, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-12], inputStack = [if_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-13], inputStack = [write_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;, statement-14], inputStack = [write_statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-1], inputStack = [<<, constant, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-3], inputStack = [<<, identifier, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<, constant], inputStack = [write_helper, ;, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2, <<], inputStack = [constant, write_helper, ;, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-2], inputStack = [<<, constant, write_helper, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3, <<], inputStack = [identifier, ;, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-3], inputStack = [<<, identifier, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, }]} 
Configuration{move = MOMENTARY_INSUCCESS, stateOfParsing = BACK_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4, <<], inputStack = [identifier, write_helper, ;, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write, write_helper-4], inputStack = [<<, identifier, write_helper, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1, write], inputStack = [write_helper, ;, statement, }, }]} 
Configuration{move = BACK, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13, write_statement-1], inputStack = [write, write_helper, ;, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = BACK_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-13], inputStack = [write_statement, statement, }, }]} 
Configuration{move = ANOTHER_TRY, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14], inputStack = [write_statement, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 12, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1], inputStack = [write, write_helper, ;, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write], inputStack = [write_helper, ;, }, }]} 
Configuration{move = EXPAND, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 13, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1], inputStack = [<<, constant, ;, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 14, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<], inputStack = [constant, ;, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 15, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant], inputStack = [;, }, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 16, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;], inputStack = [}, }]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 17, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }], inputStack = [}]} 
Configuration{move = ADVANCE, stateOfParsing = NORMAL_STATE, positionCurrentSymbol = 18, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }, }], inputStack = []} 
Configuration{move = SUCCESS, stateOfParsing = FINAL_STATE, positionCurrentSymbol = 18, workingStack = [program-1, main, (, ), {, statement-8, if_statement-2, if, (, condition-1, expression-1, string_expression-2, constant, relation-6, >=, expression-1, string_expression-2, constant, ), {, statement-14, write_statement-1, write, write_helper-1, <<, constant, ;, }, }], inputStack = []} 
